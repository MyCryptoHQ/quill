name: Package Application

on:
  #For testing purpuses
  pull_request:
    branches:
      - '*'
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
      - name: Retrieves project from the git branch
        uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat package.json | grep '\"node\":' | sed 's/^ *//;s/ *$//;s/\"node\":\ \"//;s/\",//' )"
        id: nvm

      - name: Setup node ${{ steps.nvm.outputs.NVMRC }}
        uses: actions/setup-node@v1
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - run: node --version; npm --version; yarn --version

      - name: Cache node modules
        id: cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/yarn.lock') }}

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install

      - name: Add MacOS certificates
        if: matrix.os == 'macos-latest'
        run: |
          KEYCHAIN=build.keychain
          security create-keychain -p $MACOS_KEYCHAIN_PASSWORD $KEYCHAIN
          security default-keychain -s $KEYCHAIN
          security unlock-keychain -p $MACOS_KEYCHAIN_PASSWORD $KEYCHAIN
          security import <(echo $CERTIFICATE_OSX_APPLICATION | base64 --decode) \
                          -f pkcs12 \
                          -k $KEYCHAIN \
                          -P $CERTIFICATE_PASSWORD \
                          -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k $MACOS_KEYCHAIN_PASSWORD $KEYCHAIN
        env:
          CERTIFICATE_OSX_APPLICATION: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
          MACOS_KEYCHAIN_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}

      # - name: Add Windows certificate
      #   if: matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/')
      #   id: write_file
      #   uses: timheuer/base64-to-file@v1
      #   with:
      #     fileName: 'win-certificate.pfx'
      #     encodedString: ${{ secrets.CERTIFICATE_WINDOWS_PFX }}

      - name: Make (${{ matrix.os }})
        run: yarn make
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          WINDOWS_PFX_FILE: ${{ steps.write_file.outputs.filePath }}
          WINDOWS_PFX_PASSWORD: ${{ secrets.WINDOWS_PFX_PASSWORD }}

      - name: Release
        run: yarn run publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
